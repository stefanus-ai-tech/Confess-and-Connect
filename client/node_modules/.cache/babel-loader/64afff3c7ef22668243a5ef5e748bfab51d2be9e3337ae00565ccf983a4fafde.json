{"ast":null,"code":"import React from\"react\";import ReactDOM from\"react-dom\";import App from\"./App\";import{jsx as _jsx}from\"react/jsx-runtime\";ReactDOM.render(/*#__PURE__*/_jsx(React.StrictMode,{children:/*#__PURE__*/_jsx(App,{})}),document.getElementById(\"root\"));// server/index.js\nconst express=require(\"express\");const http=require(\"http\");const socketIo=require(\"socket.io\");const cors=require(\"cors\");const path=require(\"path\");const app=express();// Middleware\napp.use(cors());app.use(express.json());// Serve static files from the React frontend app\napp.use(express.static(path.join(__dirname,\"..\",\"client\",\"build\")));// Initialize the server\nconst server=http.createServer(app);const io=socketIo(server,{cors:{origin:\"*\",// In production, specify the frontend URL\nmethods:[\"GET\",\"POST\"]}});// Mapping to store user roles and their socket IDs\nconst users={};// Socket.IO connection handling\nio.on(\"connection\",socket=>{console.log(\"New client connected:\",socket.id);// Handle joining a room\nsocket.on(\"join_room\",data=>{const{roomId,role}=data;socket.join(roomId);socket.roomId=roomId;socket.role=role;console.log(`User ${socket.id} joined room: ${roomId} as ${role}`);socket.emit(\"joined_room\",roomId);});// Handle sending messages\nsocket.on(\"send_message\",data=>{const{message,mode}=data;const roomId=socket.roomId;if(!roomId)return;if(mode===\"solo\"){// Trigger burn animation for the sender\nsocket.emit(\"burn_confession\");}else{// Emit message to others in the room\nsocket.to(roomId).emit(\"receive_message\",{from:socket.id,message});}});// Handle disconnection\nsocket.on(\"disconnect\",()=>{console.log(\"Client disconnected:\",socket.id);// Additional cleanup can be done here if needed\n});});// The \"catchall\" handler: for any request that doesn't match the above, send back React's index.html\napp.get(\"*\",(req,res)=>{res.sendFile(path.join(__dirname,\"..\",\"client\",\"build\",\"index.html\"));});const PORT=process.env.PORT||5000;server.listen(PORT,()=>console.log(`Server running on port ${PORT}`));","map":{"version":3,"names":["React","ReactDOM","App","jsx","_jsx","render","StrictMode","children","document","getElementById","express","require","http","socketIo","cors","path","app","use","json","static","join","__dirname","server","createServer","io","origin","methods","users","on","socket","console","log","id","data","roomId","role","emit","message","mode","to","from","get","req","res","sendFile","PORT","process","env","listen"],"sources":["/home/adri/Documents/confessTest/confess-and-connect/client/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// server/index.js\nconst express = require(\"express\");\nconst http = require(\"http\");\nconst socketIo = require(\"socket.io\");\nconst cors = require(\"cors\");\nconst path = require(\"path\");\n\nconst app = express();\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// Serve static files from the React frontend app\napp.use(express.static(path.join(__dirname, \"..\", \"client\", \"build\")));\n\n// Initialize the server\nconst server = http.createServer(app);\nconst io = socketIo(server, {\n  cors: {\n    origin: \"*\", // In production, specify the frontend URL\n    methods: [\"GET\", \"POST\"],\n  },\n});\n\n// Mapping to store user roles and their socket IDs\nconst users = {};\n\n// Socket.IO connection handling\nio.on(\"connection\", (socket) => {\n  console.log(\"New client connected:\", socket.id);\n\n  // Handle joining a room\n  socket.on(\"join_room\", (data) => {\n    const { roomId, role } = data;\n    socket.join(roomId);\n    socket.roomId = roomId;\n    socket.role = role;\n    console.log(`User ${socket.id} joined room: ${roomId} as ${role}`);\n    socket.emit(\"joined_room\", roomId);\n  });\n\n  // Handle sending messages\n  socket.on(\"send_message\", (data) => {\n    const { message, mode } = data;\n    const roomId = socket.roomId;\n    if (!roomId) return;\n\n    if (mode === \"solo\") {\n      // Trigger burn animation for the sender\n      socket.emit(\"burn_confession\");\n    } else {\n      // Emit message to others in the room\n      socket.to(roomId).emit(\"receive_message\", { from: socket.id, message });\n    }\n  });\n\n  // Handle disconnection\n  socket.on(\"disconnect\", () => {\n    console.log(\"Client disconnected:\", socket.id);\n    // Additional cleanup can be done here if needed\n  });\n});\n\n// The \"catchall\" handler: for any request that doesn't match the above, send back React's index.html\napp.get(\"*\", (req, res) => {\n  res.sendFile(path.join(__dirname, \"..\", \"client\", \"build\", \"index.html\"));\n});\n\nconst PORT = process.env.PORT || 5000;\nserver.listen(PORT, () => console.log(`Server running on port ${PORT}`));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}